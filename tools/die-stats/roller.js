"use strict";function _createForOfIteratorHelper(t,e){var r,n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length)return n&&(t=n),r=0,{s:e=function(){},n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,o=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){o=!0,s=t},f:function(){try{a||null==n.return||n.return()}finally{if(o)throw s}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Map"===(r="Object"===r&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var Rolls=require("./rolls");module.exports=function(){function t(){_classCallCheck(this,t),this.callback=null,this.statusCallback=null,this.startingStepCount=0,this.currentStepNumber=0,this.steps=[],this.timeout=null,this.results=[]}return _createClass(t,[{key:"status",value:function(t){this.statusCallback(t.message)}},{key:"calculate",value:function(t,e,r){this.timeout&&(clearTimeout(this.timeout),this.timeout=null),this.callback=e,this.statusCallback=r,this.steps=[],this.results=this.createSteps(t),this.scheduleNextStep()}},{key:"hasDropsOrPenalties",value:function(t){return t.drop||t.penalty}},{key:"dropPenaltyBonus",value:function(t,e){if(!this.hasDropsOrPenalties)return t.adjustBonus(e.bonus),t;var s=t.fork(),a=(s.adjustBonus(e.bonus+t.getBonus()),e.drop||0),o=e.penalty||0;return t.forEach(function(t,e){for(var r=0;r<a;r+=1)t.shift();for(var n=0;n<o;n+=1)t.pop();s.add(t,e)}),s}},{key:"createSteps",value:function(t){var e,r=[],n=_createForOfIteratorHelper(t);try{for(n.s();!(e=n.n()).done;){var s=e.value;s.roll?this.createStepsSubgroup(r,s):this.createStepsDieRoll(r,s)}}catch(t){n.e(t)}finally{n.f()}return r}},{key:"createStepsSubgroup",value:function(e,r){var n,s=this,t=this.createSteps(r.roll);this.addStep("Merging group",function(){n=s.combineRolls(t)}),this.addStep("Handling drops, penalties, and bonuses",function(){var t=s.dropPenaltyBonus(n,r);e.push(t)})}},{key:"rollDie",value:function(t){for(var e=new Rolls,r=1;r<=t;r+=1)e.add([r],1);return e}},{key:"createStepsDieRoll",value:function(e,r){var n=this,s=[],t=r.die.sides,a=r.die.number;this.addStep("Rolling dice: ".concat(a,"d").concat(t),function(){for(;s.length<a;)s.push(n.rollDie(r.die.sides))});for(var o=1;o<a;o+=1)this.addStep("Merging ".concat(o,"d").concat(t," into ").concat(o+1,"d").concat(t),function(){var t=s.shift(),e=s.shift(),t=t.mergeWith(e);n.hasDropsOrPenalties(r)?s.unshift(t):(e=t.consolidate(),s.unshift(e))});this.addStep("Handling drops, penalties, and bonuses",function(){var t=s[0]||new Rolls,t=n.dropPenaltyBonus(t,r);e.push(t)})}},{key:"combineRolls",value:function(t){for(var e=(e=t.shift()).consolidate();t.length;)e=(e=e.mergeWith(t.shift())).consolidate();return e}},{key:"scheduleNextStep",value:function(){var t,e=this;this.steps.length?(t=this.steps.shift(),this.status(t),this.currentStepNumber+=1,this.timeout=setTimeout(function(){e.timeout=null,e.stepResult=t.stepFn(),e.scheduleNextStep()},100)):this.completeResults()}},{key:"completeResults",value:function(){var t=this.combineRolls(this.results),r=0,n=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY,a=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY,i=0,l=(t.forEach(function(t,e){t=t[0];r+=t*e,i+=e,n=Math.min(n,t),s=Math.max(s,t),a=Math.min(a,e),o=Math.max(o,e)}),r/i),u=0;t.forEach(function(t,e){t=t[0];u+=Math.abs(t-l)*e}),this.callback({avg:l,maxCount:o,maxRolls:s,minCount:a,minRolls:n,rolls:t,stdDev:u/i,stdDevTotal:u,sum:r,totalRolls:i})}},{key:"addStep",value:function(t,e){this.steps.push({message:t,stepFn:e})}}]),t}();