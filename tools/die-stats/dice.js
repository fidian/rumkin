"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,_toPropertyKey(i.key),i)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}var BarChart=require("../../js/mithril/bar-chart"),conduitEvents=require("../../js/module/conduit-events"),Parser=require("./parser"),parser=new Parser,Roller=require("./roller"),roller=new Roller;module.exports=function(){function t(){_classCallCheck(this,t),this.input="",this.isEmpty=!0,this.isWorking=!1,this.isInvalid=!1,this.min=0,this.max=0,this.avg=0,this.stdDev=0,this.result=null,this.calculatingMessage="",window.diceInstance=this}return _createClass(t,[{key:"oninit",value:function(){var e=this;this.input="",this.update(),this.unsubscribe=conduitEvents.on("dice",function(t){e.input=t||"",e.update()})}},{key:"onbeforeremove",value:function(){this.unsubscribe()}},{key:"update",value:function(){var e=this,t=(this.input||"").replace(/[^-+0-9dDP,()]/g,"");if(this.isEmpty=!1,this.isWorking=!1,this.isInvalid=!1,""===t)this.isEmpty=!0;else try{this.calculatingMessage="Initial setup";var r=parser.parse(t);this.isWorking=!0,roller.calculate(r,function(t){e.isWorking=!1,e.result=t,m.redraw()},function(t){e.calculatingMessage=t,m.redraw()})}catch(t){this.isInvalid=!0,this.invalidMessage=t.toString()}}},{key:"setInput",value:function(t){t!==this.input&&(this.input=t,this.update())}},{key:"view",value:function(){var e=this;return[m("p",["What do you want to roll?",m("br"),m("input",{type:"text",value:this.input,onchange:function(t){e.setInput(t.target.value)},disabled:this.isWorking})]),this.viewResults()]}},{key:"viewResults",value:function(){return this.isInvalid?m("p","Syntax is invalid and needs to be corrected: ".concat(this.invalidMessage)):this.isWorking?m("p","Calculating statistics: ".concat(this.calculatingMessage)):this.isEmpty?[]:[m("p",["Min: ".concat(this.result.minRolls),m("br"),"Max: ".concat(this.result.maxRolls),m("br"),"Average (Mean): ".concat(this.result.avg),m("br"),"Standard Deviation: ".concat(this.result.stdDev)]),m(BarChart,{columns:[{label:"Roll",property:"roll",attrs:{align:"right"}},{label:"Freq",property:"freq",attrs:{align:"right"}},{label:"Prob",property:"probStr",attrs:{align:"right"}},{label:"Bar",property:"prob",barChart:!0}],data:this.reformatRollsAsBarChart()})]}},{key:"reformatRollsAsBarChart",value:function(){var i=this,n=[];return this.result.rolls.forEach(function(t,e){var r=e/i.result.totalRolls;n.push({roll:t[0],freq:e,prob:r,probStr:r.toFixed(5)})}),n}}]),t}();