"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,e,i){return e&&_defineProperties(t.prototype,e),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}var BarChart=require("../../js/mithril/bar-chart"),Parser=require("./parser"),parser=new Parser,Roller=require("./roller"),roller=new Roller;module.exports=function(){function t(){_classCallCheck(this,t),this.input="",this.isEmpty=!0,this.isWorking=!1,this.isInvalid=!1,this.min=0,this.max=0,this.avg=0,this.stdDev=0,this.result=null,this.calculatingMessage="",window.diceInstance=this}return _createClass(t,[{key:"oninit",value:function(){this.input=m.route.param("dice")||"",this.update()}},{key:"update",value:function(){var e=this,t=(this.input||"").replace(/[^-+0-9dDP,()]/g,"");if(m.route.set("/",{dice:t.trim()}),this.isEmpty=!1,this.isWorking=!1,this.isInvalid=!1,""===t)this.isEmpty=!0;else try{this.calculatingMessage="Initial setup";var i=parser.parse(t);this.isWorking=!0,roller.calculate(i,function(t){e.isWorking=!1,e.result=t,m.redraw()},function(t){e.calculatingMessage=t,m.redraw()})}catch(t){this.isInvalid=!0,this.invalidMessage=t.toString()}}},{key:"setInput",value:function(t){t!==this.input&&(this.input=t,this.update())}},{key:"view",value:function(){var e=this;return[m("p",["What do you want to roll?",m("br"),m("input",{type:"text",value:this.input,onchange:function(t){e.setInput(t.target.value)},disabled:this.isWorking})]),this.viewResults()]}},{key:"viewResults",value:function(){return this.isInvalid?m("p","Syntax is invalid and needs to be corrected: ".concat(this.invalidMessage)):this.isWorking?m("p","Calculating statistics: ".concat(this.calculatingMessage)):this.isEmpty?[]:[m("p",["Min: ".concat(this.result.minRolls),m("br"),"Max: ".concat(this.result.maxRolls),m("br"),"Average (Mean): ".concat(this.result.avg),m("br"),"Standard Deviation: ".concat(this.result.stdDev)]),m(BarChart,{columns:[{label:"Roll",property:"roll",attrs:{align:"right"}},{label:"Freq",property:"freq",attrs:{align:"right"}},{label:"Prob",property:"probStr",attrs:{align:"right"}},{label:"Bar",property:"prob",barChart:!0}],data:this.reformatRollsAsBarChart()})]}},{key:"reformatRollsAsBarChart",value:function(){var r=this,s=[];return this.result.rolls.forEach(function(t,e){var i=e/r.result.totalRolls;s.push({roll:t[0],freq:e,prob:i,probStr:i.toFixed(5)})}),s}}]),t}();