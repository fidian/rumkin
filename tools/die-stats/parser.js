"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,_toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,r){if("object"!==_typeof(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0===t)return("string"===r?String:Number)(e);t=t.call(e,r||"default");if("object"!==_typeof(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}var InputTracker=require("./input-tracker");module.exports=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"parse",value:function(e){var e=new InputTracker(e),r=this.roll(e);if(""!==e.peek())throw new Error("Extra unparseable information: ".concat(e.getRemainder()));return r}},{key:"digit",value:function(e){for(var r="",t=e.peek();"0"<=t&&t<="9";)r+=t,e.next(),t=e.peek();if(0===r.length)throw new Error("Expecting a digit, found non-digit characters: ".concat(e.getRemainder()));return+r}},{key:"die",value:function(e){var r=this.digit(e);if(r<=0)throw new Error("Only positive numbers allowed for the number of dice");if("d"!==e.peek())throw new Error('Expecting "d", found: '.concat(e.getRemainder()));e.next();e=this.digit(e);if(e<=0)throw new Error("Only positive numbers allowed for the number of sides of dice");return{number:r,sides:e}}},{key:"group",value:function(e){var r={};if("("===e.peek()){if(e.next(),r.roll=this.roll(e),")"!==e.peek())throw new Error('Expecting ")", found: '.concat(e.getRemainder()));e.next()}else r.die=this.die(e);if("D"===e.peek()&&(e.next(),r.drop=this.digit(e),r.drop<=0))throw new Error("Only positive numbers allowed for the number of dice to drop");if("P"===e.peek()&&(e.next(),r.penalty=this.digit(e),r.drop<=0))throw new Error("Only positive numbers allowed for the number of dice to remove as a penalty");var t=e.peek();return"+"===t?(e.next(),r.bonus=this.digit(e)):"-"===t&&(e.next(),r.bonus=-this.digit(e)),r}},{key:"roll",value:function(e){var r=[];for(r.push(this.group(e));","===e.peek();)e.next(),r.push(this.group(e));return r}}]),e}();