"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,_toPropertyKey(i.key),i)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0===r)return("string"===t?String:Number)(e);r=r.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}var AdvancedInputArea=require("../advanced-input-area"),AlphabetSelector=require("../alphabet-selector"),Checkbox=require("../../../js/mithril/checkbox"),cipherConduitSetup=require("../cipher-conduit-setup"),DirectionSelector=require("../direction-selector"),Result=require("../result"),TextInput=require("../../../js/mithril/text-input");module.exports=function(){function e(){_classCallCheck(this,e),this.direction={value:"ENCRYPT"},this.columnOrder={value:!1,label:"Use the key as a column order instead of column labels"},this.alphabet={value:new rumkinCipher.alphabet.English},this.firstKey={label:"First column key",value:""},this.secondKey={label:"Second column key",value:""},this.dupesBackwards={label:"Number duplicate entries backwards instead of forwards",value:!1},this.input={value:""},this.firstColumnKey=null,this.secondColumnKey=null,cipherConduitSetup(this,"doubleColumnarTransposition")}return _createClass(e,[{key:"view",value:function(){return[m("p",m(DirectionSelector,this.direction)),m("p",m(AlphabetSelector,this.alphabet)),m("p",m(TextInput,this.firstKey)),m("p",this.viewKey(this.firstKey.value,"firstColumnKey")),m("p",m(TextInput,this.secondKey)),m("p",this.viewKey(this.secondKey.value,"secondColumnKey")),m("p",m(Checkbox,this.dupesBackwards)),m("p",m(Checkbox,this.columnOrder)),m("p",m(AdvancedInputArea,this.input)),m("p",this.viewResult())]}},{key:"viewKey",value:function(e,t){return this[t]=rumkinCipher.util.columnKey(this.alphabet.value,e,{columnOrder:this.columnOrder.value,dupesBackwards:this.dupesBackwards.value}),1<this[t].length?m("p","The resulting columnar key: ".concat(this[t].map(function(e){return e+1}).join(" "))):m("p","Enter numbers or words to generate a column key")}},{key:"viewResult",value:function(){var e,t,r,i;return this.firstColumnKey.length<2||this.secondColumnKey.length<2?m(Result,"You need at least two columns for each column key in order to encode anything"):this.input.value?(r=new rumkinCipher.util.Message(this.input.value),r=(i=rumkinCipher.cipher.columnarTransposition)[t=(e="ENCRYPT"===this.direction.value)?"encipher":"decipher"](r,this.alphabet.value,{columnKey:e?this.firstColumnKey:this.secondColumnKey}),i=i[t](r,this.alphabet.value,{columnKey:e?this.secondColumnKey:this.firstColumnKey}),m(Result,i.toString())):m(Result,"Enter text and see the result here")}}]),e}();