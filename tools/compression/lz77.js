"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,s){return t&&_defineProperties(e.prototype,t),s&&_defineProperties(e,s),Object.defineProperty(e,"prototype",{writable:!1}),e}var rumkinCompression=require("@fidian/rumkin-compression");module.exports=function(){function e(){_classCallCheck(this,e),this.ascii=!1,this.compressed="",this.includeJs=!1,this.text="",this.encodedBytesPerLine=60}return _createClass(e,[{key:"compress",value:function(){var e,t;t=this.ascii?(e=rumkinCompression.lz77Ascii).compressSync(this.text):(e=rumkinCompression.lz77,t=Buffer.from(this.text),e.compressSync(t).toString("base64")),this.includeJs&&(t=this.includeDecompressor(e,t)),this.compressed=t}},{key:"includeDecompressor",value:function(e,t){var s="((".concat(e.decompressTiny.toString(),")\n(");for(this.ascii||(s+="(");t.length>this.encodedBytesPerLine;)s+="".concat(JSON.stringify(t.substr(0,this.encodedBytesPerLine)),"+\n"),t=t.substr(this.encodedBytesPerLine);return s+=JSON.stringify(t),this.ascii||(s+="\n).split('').map(function (c) { return c.charCodeAt(0); })"),s+="))"}},{key:"view",value:function(){var t=this;return[m("div",m("label",[m("input",{type:"checkbox",checked:this.ascii,onchange:function(){t.ascii=!t.ascii,t.compress()}})," Use ASCII encoding instead of Base64"])),m("div",m("label",[m("input",{type:"checkbox",checked:this.includeJs,onchange:function(){t.includeJs=!t.includeJs,t.compress()}})," Include necessary JavaScript for decompression"])),m("textarea",{placeholder:"Enter text here",class:"W(100%) H(8em)",value:this.text,onchange:function(e){t.text=e.target.value,t.compress()}}),this.viewResult()]}},{key:"viewResult",value:function(){var e=this.text.length;if(!e)return m("div","Enter some text to compress and the result will be shown here.");var t=this.compressed.length,s=(t/e*100).toFixed(2),i=s<=100?"removing":"adding",n=Math.abs(e-t);return[m("div","".concat(e," â†’ ").concat(t," bytes, using ").concat(s,"% of the uncompressed size by ").concat(i," ").concat(n," bytes.")),m("pre",this.compressed)]}}]),e}();