"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,_toPropertyKey(n.key),n)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0===i)return("string"===t?String:Number)(e);i=i.call(e,t||"default");if("object"!==_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}var rumkinCompression=require("@fidian/rumkin-compression");module.exports=function(){function e(){_classCallCheck(this,e),this.ascii=!1,this.compressed="",this.includeJs=!1,this.text="",this.encodedBytesPerLine=60}return _createClass(e,[{key:"compress",value:function(){var e,t;t=this.ascii?(e=rumkinCompression.lz77Ascii).compressSync(this.text):(e=rumkinCompression.lz77,t=Buffer.from(this.text),e.compressSync(t).toString("base64")),this.includeJs&&(t=this.includeDecompressor(e,t)),this.compressed=t}},{key:"includeDecompressor",value:function(e,t){var i="((".concat(e.decompressTiny.toString(),")\n(");for(this.ascii||(i+="(");t.length>this.encodedBytesPerLine;)i+="".concat(JSON.stringify(t.substr(0,this.encodedBytesPerLine)),"+\n"),t=t.substr(this.encodedBytesPerLine);return i+=JSON.stringify(t),this.ascii||(i+="\n).split('').map(function (c) { return c.charCodeAt(0); })"),i+="))"}},{key:"view",value:function(){var t=this;return[m("div",m("label",[m("input",{type:"checkbox",checked:this.ascii,onchange:function(){t.ascii=!t.ascii,t.compress()}})," Use ASCII encoding instead of Base64"])),m("div",m("label",[m("input",{type:"checkbox",checked:this.includeJs,onchange:function(){t.includeJs=!t.includeJs,t.compress()}})," Include necessary JavaScript for decompression"])),m("textarea",{placeholder:"Enter text here",class:"W(100%) H(8em)",value:this.text,onchange:function(e){t.text=e.target.value,t.compress()}}),this.viewResult()]}},{key:"viewResult",value:function(){var e,t,i,n,r=this.text.length;return r?(i=(t=((e=this.compressed.length)/r*100).toFixed(2))<=100?"removing":"adding",n=Math.abs(r-e),[m("div","".concat(r," â†’ ").concat(e," bytes, using ").concat(t,"% of the uncompressed size by ").concat(i," ").concat(n," bytes.")),m("pre",this.compressed)]):m("div","Enter some text to compress and the result will be shown here.")}}]),e}();